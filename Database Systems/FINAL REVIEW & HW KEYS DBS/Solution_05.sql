/* STUDENT NAME: NAME */
/* N NUMBER: N NO. */

DROP TRIGGER TRIGGER01;
DROP TABLE ANSWER01;
DROP TABLE ANSWER02;
DROP TABLE ANSWER03;
DROP TABLE ANSWER04;
DROP TABLE ANSWER05;
DROP VIEW ANSWER05;

DROP TABLE TEMP0;
DROP TABLE TEMP1;
DROP TABLE TEMP2;
DROP TABLE TEMP3;
DROP TABLE TEMP4;
DROP TABLE TEMP5;
DROP TABLE TEMP6;
DROP TABLE TEMP7;
DROP TABLE TEMP8;
DROP TABLE TEMP9;
DROP TABLE TEMP10;
DROP TABLE TEMP11;
DROP TABLE TEMP12;
DROP TABLE TEMP13;
DROP TABLE TEMP14;
DROP TABLE TEMP15;
DROP TABLE TEMP16;
DROP TABLE TEMP17;
DROP TABLE TEMP18;
DROP TABLE TEMP19;
DROP TABLE TEMP20;

DROP TABLE FUNDING;
DROP TABLE INCLUDES;
DROP TABLE PROJECT;
DROP TABLE PARTICIPATES;
DROP TABLE TEAM;
DROP TABLE MANAGER;
DROP TABLE ENGINEER;
DROP TABLE PERSON;

CREATE TABLE PERSON (
	IDNUMBER CHAR(30) PRIMARY KEY,
	NAME CHAR(30) NOT NULL
);

CREATE TABLE MANAGER (
	IDNUMBER CHAR(30) PRIMARY KEY,
	DEGREE CHAR(30) NOT NULL,
	ROOMLAYER CHAR(30) NOT NULL,
	FOREIGN KEY (IDNUMBER) REFERENCES PERSON (IDNUMBER) ON DELETE CASCADE
);

CREATE TABLE ENGINEER (
	IDNUMBER CHAR(30) PRIMARY KEY,
	MENTOR CHAR(30),
	LVL CHAR(30) NOT NULL,
	FOREIGN KEY (IDNUMBER) REFERENCES PERSON (IDNUMBER) ON DELETE CASCADE,
	FOREIGN KEY (MENTOR) REFERENCES ENGINEER (IDNUMBER) ON DELETE CASCADE
);

CREATE TABLE TEAM (
	NAME CHAR(30) PRIMARY KEY,
	DEPARTMENT CHAR(30) NOT NULL
);

CREATE TABLE PARTICIPATES (
	TEAM CHAR(30) NOT NULL,
	ENGINEERID CHAR(30) NOT NULL,
	DIRECTOR CHAR(30),
	PRIMARY KEY (TEAM, ENGINEERID),
	FOREIGN KEY (TEAM) REFERENCES TEAM (NAME) ON DELETE CASCADE,
	FOREIGN KEY (ENGINEERID) REFERENCES ENGINEER (IDNUMBER) ON DELETE CASCADE,
	FOREIGN KEY (DIRECTOR) REFERENCES MANAGER (IDNUMBER) ON DELETE CASCADE
);

CREATE TABLE PROJECT (
	NAME CHAR(30) PRIMARY KEY,
	MANAGERID CHAR(30) NOT NULL,
	FOREIGN KEY (MANAGERID) REFERENCES MANAGER (IDNUMBER) ON DELETE CASCADE
);

CREATE TABLE INCLUDES (
	PROJECT CHAR(30) NOT NULL,
	TEAM CHAR(30) NOT NULL,
	PRIMARY KEY (PROJECT, TEAM),
	FOREIGN KEY (TEAM) REFERENCES TEAM (NAME) ON DELETE CASCADE,
	FOREIGN KEY (PROJECT) REFERENCES PROJECT (NAME) ON DELETE CASCADE
);

CREATE TABLE FUNDING (
	FUNDINGID CHAR(30) NOT NULL,
	PROJECT CHAR(30) NOT NULL,
	PRIMARY KEY (FUNDINGID, PROJECT),
	FOREIGN KEY (PROJECT) REFERENCES PROJECT (NAME) ON DELETE CASCADE
);

INSERT INTO PERSON VALUES('101', 'Abigail Black');
INSERT INTO PERSON VALUES('102', 'Diane Fisher');
INSERT INTO PERSON VALUES('103', 'Penelope Nolan');
INSERT INTO PERSON VALUES('104', 'Steven Lewis');
INSERT INTO PERSON VALUES('105', 'Jane Ross');
INSERT INTO PERSON VALUES('106', 'Bernadette Morgan');
INSERT INTO PERSON VALUES('107', 'Lily Springer');
INSERT INTO PERSON VALUES('108', 'Zoe Smith');
INSERT INTO PERSON VALUES('109', 'Amanda Mackenzie');
INSERT INTO PERSON VALUES('110', 'Adrian Butler');
INSERT INTO PERSON VALUES('111', 'John Smith');
INSERT INTO PERSON VALUES('112', 'Hannah Black');
INSERT INTO PERSON VALUES('113', 'Vanessa Gill');
INSERT INTO PERSON VALUES('114', 'Bella Clark');
INSERT INTO PERSON VALUES('115', 'Jake Underwood');
INSERT INTO PERSON VALUES('116', 'Virgini Wright');
INSERT INTO PERSON VALUES('117', 'Joseph Young');
INSERT INTO PERSON VALUES('118', 'Dorothy Miller');
INSERT INTO PERSON VALUES('119', 'Dave Mitty');
INSERT INTO PERSON VALUES('120', 'Hilary Mason');

INSERT INTO MANAGER VALUES('101', '2', '3');
INSERT INTO MANAGER VALUES('102', '1', '2');
INSERT INTO MANAGER VALUES('104', '1', '2');
INSERT INTO MANAGER VALUES('105', '2', '3');
INSERT INTO MANAGER VALUES('106', '3', '1');
INSERT INTO MANAGER VALUES('108', '3', '1');
INSERT INTO MANAGER VALUES('109', '2', '3');
INSERT INTO MANAGER VALUES('110', '2', '2');
INSERT INTO MANAGER VALUES('112', '1', '3');
INSERT INTO MANAGER VALUES('115', '2', '2');
INSERT INTO MANAGER VALUES('116', '3', '3');
INSERT INTO MANAGER VALUES('118', '1', '1');

INSERT INTO ENGINEER VALUES('102', NULL, '2');
INSERT INTO ENGINEER VALUES('103', '102', '1');
INSERT INTO ENGINEER VALUES('104', '102', '4');
INSERT INTO ENGINEER VALUES('105', NULL, '3');
INSERT INTO ENGINEER VALUES('107', NULL, '4');
INSERT INTO ENGINEER VALUES('108', '107', '3');
INSERT INTO ENGINEER VALUES('109', '105', '2');
INSERT INTO ENGINEER VALUES('111', NULL, '3');
INSERT INTO ENGINEER VALUES('112', '107', '2');
INSERT INTO ENGINEER VALUES('113', '109', '2');
INSERT INTO ENGINEER VALUES('116', '112', '3');
INSERT INTO ENGINEER VALUES('117', NULL, '1');
INSERT INTO ENGINEER VALUES('119', '116', '2');
INSERT INTO ENGINEER VALUES('120', '116', '1');

INSERT INTO TEAM VALUES('Maintaince', 'Software');
INSERT INTO TEAM VALUES('Support', 'Software');
INSERT INTO TEAM VALUES('Development', 'Hardware');
INSERT INTO TEAM VALUES('Customer', 'Core');
INSERT INTO TEAM VALUES('Management', 'Core');
INSERT INTO TEAM VALUES('Communication', 'Software');
INSERT INTO TEAM VALUES('Networking', 'Hardware');
INSERT INTO TEAM VALUES('System', 'Core');

INSERT INTO PROJECT VALUES('Data Analytics', '101');
INSERT INTO PROJECT VALUES('Web Development', '105');
INSERT INTO PROJECT VALUES('Data mining', '108');
INSERT INTO PROJECT VALUES('System Optimization', '109');
INSERT INTO PROJECT VALUES('Software development', '116');
INSERT INTO PROJECT VALUES('Hardware development', '110');
INSERT INTO PROJECT VALUES('Software supporting', '115');
INSERT INTO PROJECT VALUES('Platform maintaince', '118');

INSERT INTO FUNDING VALUES('101', 'Web Development');
INSERT INTO FUNDING VALUES('101', 'Software development');
INSERT INTO FUNDING VALUES('102', 'Data mining');
INSERT INTO FUNDING VALUES('102', 'Software supporting');
INSERT INTO FUNDING VALUES('103', 'Web Development');
INSERT INTO FUNDING VALUES('103', 'System Optimization');
INSERT INTO FUNDING VALUES('104', 'Platform maintaince');
INSERT INTO FUNDING VALUES('105', 'Software development');
INSERT INTO FUNDING VALUES('105', 'Software supporting');
INSERT INTO FUNDING VALUES('106', 'Data mining');

INSERT INTO INCLUDES VALUES('Data Analytics', 'Maintaince');
INSERT INTO INCLUDES VALUES('Data Analytics', 'Management');
INSERT INTO INCLUDES VALUES('Data Analytics', 'System');
INSERT INTO INCLUDES VALUES('Web Development', 'Maintaince');
INSERT INTO INCLUDES VALUES('Web Development', 'Networking');
INSERT INTO INCLUDES VALUES('Web Development', 'Communication');
INSERT INTO INCLUDES VALUES('Web Development', 'Development');
INSERT INTO INCLUDES VALUES('Data mining', 'Management');
INSERT INTO INCLUDES VALUES('System Optimization', 'Maintaince');
INSERT INTO INCLUDES VALUES('System Optimization', 'System');
INSERT INTO INCLUDES VALUES('Software development', 'Maintaince');
INSERT INTO INCLUDES VALUES('Software development', 'Development');
INSERT INTO INCLUDES VALUES('Software development', 'Management');
INSERT INTO INCLUDES VALUES('Software development', 'Networking');
INSERT INTO INCLUDES VALUES('Software development', 'System');
INSERT INTO INCLUDES VALUES('Hardware development', 'Maintaince');
INSERT INTO INCLUDES VALUES('Hardware development', 'Support');
INSERT INTO INCLUDES VALUES('Software supporting', 'Support');
INSERT INTO INCLUDES VALUES('Software supporting', 'Customer');
INSERT INTO INCLUDES VALUES('Platform maintaince', 'Maintaince');

INSERT INTO PARTICIPATES VALUES('Maintaince', '102', NULL);
INSERT INTO PARTICIPATES VALUES('Maintaince', '103', '101');
INSERT INTO PARTICIPATES VALUES('Maintaince', '107', NULL);
INSERT INTO PARTICIPATES VALUES('Support', '117', '104');
INSERT INTO PARTICIPATES VALUES('Support', '120', '108');
INSERT INTO PARTICIPATES VALUES('Development', '102', '106');
INSERT INTO PARTICIPATES VALUES('Development', '105', NULL);
INSERT INTO PARTICIPATES VALUES('Development', '108', '112');
INSERT INTO PARTICIPATES VALUES('Development', '111', '115');
INSERT INTO PARTICIPATES VALUES('Development', '112', '118');
INSERT INTO PARTICIPATES VALUES('Development', '113', NULL);
INSERT INTO PARTICIPATES VALUES('Customer', '105', NULL);
INSERT INTO PARTICIPATES VALUES('Customer', '117', NULL);
INSERT INTO PARTICIPATES VALUES('Customer', '119', '105');
INSERT INTO PARTICIPATES VALUES('Management', '111', '110');
INSERT INTO PARTICIPATES VALUES('Management', '117', '112');
INSERT INTO PARTICIPATES VALUES('Management', '119', NULL);
INSERT INTO PARTICIPATES VALUES('Communication', '113', NULL);
INSERT INTO PARTICIPATES VALUES('Communication', '116', NULL);
INSERT INTO PARTICIPATES VALUES('Networking', '102', '101');
INSERT INTO PARTICIPATES VALUES('Networking', '103', '104');
INSERT INTO PARTICIPATES VALUES('Networking', '105', NULL);
INSERT INTO PARTICIPATES VALUES('Networking', '116', '105');
INSERT INTO PARTICIPATES VALUES('System', '104', NULL);
INSERT INTO PARTICIPATES VALUES('System', '108', '106');
INSERT INTO PARTICIPATES VALUES('System', '113', '115');
INSERT INTO PARTICIPATES VALUES('System', '116', '118');
INSERT INTO PARTICIPATES VALUES('System', '120', NULL);


/*********************************
 INSERT YOUR SOLUTIONS OF PART 05
*********************************/
/* 1.Look at the structure of Person table and insert a person called 'Abigail Black' with ID-number '121'.*/
INSERT INTO PERSON VALUES('121', 'Abigail Black');

/* 2.Look at the structure of Funding table and delete the funding with fundingID '106'.*/
DELETE FROM FUNDING
WHERE FUNDINGID = '106';

/* 3.Produce table Answer01 (Project_Name) which contains all the projects that include two or more teams, but have no funding.*/
/* CREATE TABLE ANSWER01 AS */
CREATE TABLE ANSWER01 AS
SELECT DISTINCT PROJECT AS Project_Name
FROM INCLUDES
WHERE PROJECT NOT IN (
SELECT PROJECT
FROM FUNDING
)
GROUP BY PROJECT
HAVING COUNT(*) >= 2
ORDER BY Project_Name ASC;

/* 4.Produce table Answer02 (Engineer_Name) which contains all the engineers that participate in at least one team that 
	included by 2 or more projects.*/
/* CREATE TABLE ANSWER02 AS */
CREATE TABLE TEMP0 AS
SELECT DISTINCT TEAM
FROM INCLUDES
GROUP BY TEAM
HAVING COUNT(*) >= 2;

CREATE TABLE TEMP1 AS
SELECT DISTINCT ENGINEERID
FROM PARTICIPATES, TEMP0
WHERE PARTICIPATES.TEAM = TEMP0.TEAM;

CREATE TABLE ANSWER02 AS
SELECT DISTINCT NAME AS Engineer_Name
FROM PERSON
WHERE IDNUMBER IN (
SELECT ENGINEERID FROM TEMP1
)
ORDER BY Engineer_Name ASC;

/* 5.Produce table Answer03 (Project_Name) which contains all the projects which include
	all teams with at least an engineer of level 4.*/
/* CREATE TABLE ANSWER03 AS */

CREATE TABLE TEMP2 AS
SELECT DISTINCT TEAM
FROM PARTICIPATES, ENGINEER
WHERE PARTICIPATES.ENGINEERID = ENGINEER.IDNUMBER AND ENGINEER.LVL = '4';

CREATE TABLE ANSWER03 AS
SELECT DISTINCT PROJECT AS Project_Name
FROM INCLUDES
WHERE NOT EXISTS (
SELECT TEAM FROM TEMP2
MINUS
SELECT TEAM FROM INCLUDES INCL WHERE INCLUDES.PROJECT = INCL.PROJECT
)
ORDER BY Project_Name ASC;

spool N12345678_Homework05Spool.txt;
SELECT * FROM PERSON
ORDER BY IDNUMBER;
SELECT * FROM FUNDING
ORDER BY FUNDINGID;
SELECT * FROM ANSWER01;
SELECT * FROM ANSWER02;
SELECT * FROM ANSWER03;


/* 6.Suppose that the attribute 'mentor' of engineer is transitive. That is, if engineer A is the
	mentor of engineer B, then he or she will also be the mentor of engineers who is mentored
	by engineer B. Then produce table Answer04 (Engineer_ID, Mentor_ID) which contains
	all the (engineer, mentor) pairs.*/
WITH ANSWER04(Engineer_ID, Mentor_ID) AS
(
	SELECT ENGINEER.IDNUMBER, ENGINEER.MENTOR
	FROM ENGINEER 
	WHERE ENGINEER.MENTOR IS NOT NULL
	UNION ALL
	SELECT ENGINEER.IDNUMBER, ANSWER04.Mentor_ID
	FROM ANSWER04 
	JOIN ENGINEER
	ON ENGINEER.MENTOR = ANSWER04.Engineer_ID
)
SELECT DISTINCT * FROM ANSWER04
ORDER BY Engineer_ID ASC, Mentor_ID ASC;


/* 7.Create view Anwser05 (Project_Name, Room_Layer) which contains the project names a manager
	managed, and their room layers. Now, by running the existing script, from which you
	should not remove the existing update of the view, it should give you an error.

	To resolve this, create a trigger that is triggered when you try to update an entry of the
	view. Any update of the view must also be reflected in the base tables using this trigger.*/
/* CREATE TABLE ANSWER05 AS */
CREATE VIEW ANSWER05 AS
SELECT PROJECT.NAME AS Project_Name, MANAGER.ROOMLAYER AS Room_Layer
FROM PROJECT, MANAGER
WHERE PROJECT.MANAGERID = MANAGER.IDNUMBER
ORDER BY Project_Name ASC, Room_Layer ASC;

SELECT * FROM ANSWER05;

UPDATE ANSWER05
SET Room_Layer = '2'
WHERE Project_Name = 'Software development';

/* Create trigger Trigger01 */
CREATE TRIGGER TRIGGER01
	INSTEAD OF UPDATE ON ANSWER05
	REFERENCING NEW AS new
BEGIN UPDATE MANAGER
	SET ROOMLAYER = :new.Room_Layer
	WHERE IDNUMBER IN 
	(SELECT MANAGERID
	FROM PROJECT
	WHERE PROJECT.NAME = :old.Project_Name);
END TRIGGER01;
/

UPDATE ANSWER05
SET Room_Layer = '2'
WHERE Project_Name = 'Software development';

SELECT * FROM ANSWER05;
SELECT * FROM MANAGER
ORDER BY IDNUMBER;

spool off;
